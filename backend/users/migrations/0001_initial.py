# Generated by Django 4.2.4 on 2023-10-12 12:19

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='Email')),
                ('sex', models.CharField(choices=[('m', 'Man'), ('w', 'Woman')], max_length=1, null=True)),
                ('orientation', models.CharField(choices=[('m', 'Man'), ('w', 'Woman'), ('b', 'Bisexual')], max_length=1, null=True)),
                ('relation_type', models.CharField(choices=[('l', 'Long'), ('s', 'Short'), ('d', 'Default')], max_length=1, null=True)),
                ('age', models.PositiveIntegerField(null=True, verbose_name='Age')),
                ('height', models.PositiveIntegerField(null=True, verbose_name='Height')),
                ('weight', models.PositiveIntegerField(null=True, verbose_name='Weight')),
                ('preferred_age', models.CharField(choices=[('sm', 'Small'), ('md', 'Medium'), ('lg', 'Large'), ('xl', 'Extra large')], max_length=2, null=True, verbose_name='Preferred Age')),
                ('preferred_height', models.CharField(choices=[('sm', 'Small'), ('md', 'Medium'), ('lg', 'Large'), ('xl', 'Extra large')], max_length=2, null=True, verbose_name='Preferred Height')),
                ('preferred_weight', models.CharField(choices=[('sm', 'Small'), ('md', 'Medium'), ('lg', 'Large'), ('xl', 'Extra large')], max_length=2, null=True, verbose_name='Preferred Weight')),
                ('about', models.TextField(max_length=700, null=True, verbose_name='About')),
                ('country', models.CharField(max_length=60, null=True, verbose_name='Country')),
                ('preferred_country', models.CharField(max_length=60, null=True, verbose_name='Country')),
                ('city', models.CharField(max_length=60, null=True, verbose_name='City')),
                ('new_like_notification', models.BooleanField(default=True)),
                ('new_match_notification', models.BooleanField(default=True)),
                ('new_message_notification', models.BooleanField(default=True)),
                ('blacklist', models.ManyToManyField(blank=True, null=True, related_name='blacklisted_by', to=settings.AUTH_USER_MODEL)),
                ('disliked', models.ManyToManyField(blank=True, related_name='disliked_by', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('liked', models.ManyToManyField(blank=True, related_name='liked_by', to=settings.AUTH_USER_MODEL)),
                ('recommends', models.ManyToManyField(blank=True, null=True, related_name='recommended_by', to=settings.AUTH_USER_MODEL)),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserMedia',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='users/user_media')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='media', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
